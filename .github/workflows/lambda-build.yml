name: Deploy Lambda and SNS via SAM

on:
  workflow_dispatch:  # Manually trigger the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # Allow OIDC token usage for AWS authentication
      contents: read    # Read repository contents

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Python 3.9 for the SAM Lambda environment
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    # Step 3: Configure AWS credentials using OIDC
    # This uses GitHub Actions OIDC to assume the IAM role in AWS
    - name: Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}  # Ensure this secret is set in your GitHub repository
        aws-region: us-east-1

    # Step 4: Install AWS SAM CLI
    # Install SAM CLI globally so that it is available in the PATH
    - name: Install AWS SAM CLI
      run: |
        pip install aws-sam-cli
        echo "export PATH=$PATH:~/.local/bin" >> $GITHUB_ENV  # Ensure ~/.local/bin is added to PATH

    # Step 5: Check SAM CLI version
    # Verify that SAM CLI is installed and available
    - name: Check SAM CLI version
      run: sam --version

    # Step 6: Debugging: Check if the S3 bucket name is available
    # Ensure that the S3 bucket name is being retrieved properly from GitHub secrets
    - name: Debug S3 Bucket Name
      run: echo "S3 Bucket aws-sam-lambda-20241021"

    # Step 7: List S3 Buckets to ensure AWS access
    # Verify that the IAM role has access to S3 and the bucket exists
    - name: List S3 Buckets
      run: aws s3 ls

    # Step 8: Package the SAM application (simplified command)
    # Package the Lambda application, upload it to S3, and generate the CloudFormation template
    - name: Package SAM application
      run: sam package --output-template-file packaged.yaml --s3-bucket aws-sam-lambda-20241021

    # Step 9: Print environment variables (for debugging)
    - name: Print environment variables
      run: printenv

    # Step 10: Package SAM application (using environment variable)
    - name: Package SAM application using environment variable
      run: sam package --output-template-file packaged.yaml --s3-bucket $S3_BUCKET_NAME
      env:
        S3_BUCKET_NAME: aws-sam-lambda-20241021

    # Step 11: Deploy the SAM application
    # Deploy the packaged application using CloudFormation and the specified parameters
    - name: Deploy SAM application
      run: |
        sam deploy --template-file packaged.yaml --stack-name sam-lambda-sns-stack \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
          SnsMetricTopicArn=${{ secrets.SNS_METRIC_TOPIC_ARN }} \
          SnsQueryTopicArn=${{ secrets.SNS_QUERY_TOPIC_ARN }} \
          LambdaRoleArn=${{ secrets.LAMBDA_ROLE_ARN }} \
          SlackWebhookUrl=${{ secrets.SLACK_WEBHOOK_URL }}


    # Step 12: Output the deployed Lambda ARN
    # After deployment, fetch and output the ARN of the deployed Lambda function
    - name: Output Lambda ARN
      run: |
        aws cloudformation describe-stacks \
          --stack-name sam-lambda-sns-stack \
          --query "Stacks[0].Outputs[?OutputKey=='LambdaFunctionArn'].OutputValue" \
          --output text
